# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graymean.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os,glob,time
import sys

cwd=os.getcwd()
sys.path.append(cwd)

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QFileDialog, QMessageBox
from grayValue import calImage

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(334, 289)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        Form.setWindowOpacity(1.0)

        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(30, 20, 271, 201))
        self.groupBox.setObjectName("groupBox")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(50, 30, 181, 151))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(50, 220, 232, 61))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setMaximumSize(QtCore.QSize(70, 30))
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.textBrowser = QtWidgets.QTextBrowser(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser.sizePolicy().hasHeightForWidth())
        self.textBrowser.setSizePolicy(sizePolicy)
        self.textBrowser.setMaximumSize(QtCore.QSize(100, 25))
        self.textBrowser.setObjectName("textBrowser")
        self.horizontalLayout.addWidget(self.textBrowser)

        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_3.setMaximumSize(QtCore.QSize(30, 16777215))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.pushButton_3.setIconSize(QtCore.QSize(20, 20))
        self.horizontalLayout.addWidget(self.pushButton_3)

        self.save_dir = "./data/result/"
        os.makedirs(self.save_dir,exist_ok=True)
        self.uiInit()

        self.textBrowser.setText(self.save_dir)
        self.pushButton.clicked.connect(self.pushButtonClicked)
        self.pushButton_2.clicked.connect(self.pushButton2Clicked)
        self.pushButton_3.clicked.connect(self.pushButton3Clicked)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def uiInit(self):
        self.cal_pic_path = ""
        self.cal_pic_dir = None
        self.grayValue = None
        self.pic_dir = None


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "平均灰度计算小程序"))
        self.groupBox.setTitle(_translate("Form", "灰度值计算"))
        self.pushButton.setText(_translate("Form", "单图像灰度"))
        self.pushButton_2.setText(_translate("Form", "批文件灰度"))
        self.label.setText(_translate("Form", "结果存储于："))
        self.pushButton_3.setText(_translate("Form", ".."))

    #pushButton4Clicked 单张图片灰度存储于txt
    def pushButtonClicked(self):  # TODO
        self.cal_avgpix = 0
        self.cal_pic_path = QFileDialog.getOpenFileName(None, "请选择图片路径", "./data/test")
        self.cal_pic_dir = os.path.split(self.cal_pic_path[0])[0]
        self.cal_pic_path = [self.cal_pic_path[0]]
        cal_pic_path = self.cal_pic_path
        if len(cal_pic_path) != 0:
            file_name, avg_grayes = calImage(cal_pic_path)
            self.writeCalResult(file_name,avg_grayes)
            if self.cal_avgpix == 0:
                self.reply = QMessageBox.information(self, "提示", "图片灰度计算失败！")
            else:
                self.reply = QMessageBox.information(self, "提示", "图片灰度计算成功！结果文档已存入{0}目录下{1}。".format(self.save_dir,os.path.split(self.grayValue)[-1]))

    # pushButton7Clicked 多张图片灰度存储 可调用统一代码
    def pushButton2Clicked(self): #TODO
        self.cal_avgpix = 0
        self.cal_pic_dir = QFileDialog.getExistingDirectory(None, "请选择文件夹路径", "./data/test/")
        cal_pic_path = glob.glob(self.cal_pic_dir + "/*.[jp][pn]g")
        if len(cal_pic_path) != 0:
            file_name, avg_grayes = calImage(cal_pic_path)
            self.writeCalResult(file_name,avg_grayes)
            if self.cal_avgpix == 0:
                self.reply = QMessageBox.information(self, "提示", "图片灰度计算失败！")
            else:
                self.reply = QMessageBox.information(self, "提示", "图片灰度计算成功！结果文档已存入{0}目录下{1}。".format(self.save_dir,os.path.split(self.grayValue)[-1]))

    def pushButton3Clicked(self):
        save_dir = QFileDialog.getExistingDirectory(None, "请选择保存路径", "./data/result/")
        save_dir += "/"
        # print(save_dir)
        self.save_dir = save_dir
        self.textBrowser.setText(self.save_dir)

    def writeCalResult(self,file_name,avg_grayes):
        #获取时间
        timenum = int( time.time() * 100) % 1000
        timestr = time.strftime("%Y%m%d%H%M", time.localtime())
        timestr += str(timenum)
        #设置文件名
        os.makedirs(self.save_dir,exist_ok=True)
        self.grayValue = "{0}grayValue{1}.txt".format(self.save_dir, timestr)
        writeStr = ""
        writeStr += "检测图片路径:{0}\t\t\t结果存储:{1}\n".format(self.cal_pic_dir,self.grayValue)
        writeStr += "=" * 50
        writeStr += "\n图片文件名 \t\t 灰度平均值\n"
        for name,grays in zip(file_name,avg_grayes):
            writeStr += "{0}\t{1}\n".format(name,grays)
        # 保存文件
        f = open(self.grayValue, "w+")
        f.write(writeStr)
        f.close()
        self.cal_avgpix = 1

class MainWnd(Ui_Form, QWidget):
    def __init__(self):
        super(MainWnd, self).__init__()
        self.setupUi(self)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainWindow = MainWnd()
    mainWindow.show()
    sys.exit(app.exec_())